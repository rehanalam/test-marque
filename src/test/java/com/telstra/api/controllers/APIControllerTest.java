/*
 * AazarKhanTelstraSMSAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.telstra.api.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.telstra.api.models.*;
import com.telstra.api.exceptions.*;
import com.telstra.api.APIHelper;
import com.telstra.api.Configuration;
import com.telstra.api.testing.TestHelper;
import com.telstra.api.controllers.APIController;

import com.fasterxml.jackson.core.type.TypeReference;

public class APIControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static APIController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getClient();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * The Send SMS method sends an SMS message to a single Australian mobile phone number. A unique identifier (messageId) returned in the response, which may be used to query for the delivery status of the message.
     * @throws Throwable
     */
    @Test
    public void testSendSMS1() throws Throwable {
        // Parameters for the API call
        SendSMSToBodyObject body = APIHelper.deserialize("{  \"to\": \"\",  \"body\": \"\"}", new TypeReference<SendSMSToBodyObject>(){});

        // Set callback and perform API call
        SendSMSResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createSendSMS(body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{  \"messageId\": \"\"}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Use the unique identifier (messageId) returned as returned in the response from the Send SMS method to get the status.
     * @throws Throwable
     */
    @Test
    public void testGetMessageStatus1() throws Throwable {

        // Set callback and perform API call
        GetMessageStatusResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getMessageStatus();
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{  \"to\": \"\",  \"receivedTimestamp\": \"\",  \"sentTimestamp\": \"\",  \"status\": \"\"}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

}
